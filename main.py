import datetime
import telebot
from telebot import types
import requests
from bs4 import BeautifulSoup as BS
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from webdriver_manager.chrome import ChromeDriverManager
import os
import jsonworker
import res
import random
import statechecker

bot = telebot.TeleBot(res.TOKEN)

city_flag = 0
driverbuff = []
search_flag = 0


def see_weather(message):
    bot.send_message(message.chat.id, '–ö –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
    location = types.KeyboardButton('–ì–µ–æ–ø–æ–∑–∏—Ü–∏—èüéØ', request_location=True)
    city = types.KeyboardButton('–ì–æ—Ä–æ–¥üåâ')
    fact = types.KeyboardButton('–§–∞–∫—Ç –¥–Ω—è‚ÅâÔ∏è')
    news = types.KeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏üåè')
    markup.add(location, city, fact, news)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏: –ø–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –ø–æ –≥–æ—Ä–æ–¥—É", reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
    weather = types.KeyboardButton('–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
    nevermind = types.KeyboardButton('–ü—Ä–æ—Å—Ç–æ –º–∏–º–æ –ø—Ä–æ—Ö–æ–¥–∏–ª')
    markup.add(weather, nevermind)
    bot.send_sticker(message.chat.id, random.choice(res.STICKERS3))
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ?',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def reply(message):
    if message.text == '–ü—Ä–æ—Å—Ç–æ –º–∏–º–æ –ø—Ä–æ—Ö–æ–¥–∏–ª':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, '–†–∞–¥ –±—ã–ª –ø–æ–≤–∏–¥–∞—Ç—å—Å—è!', reply_markup=markup)
    if message.text == '–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É':
        see_weather(message)
    if message.text == '–ì–æ—Ä–æ–¥üåâ':
        global city_flag
        city_flag = city_flag + 1
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        back = types.KeyboardButton('–ù–∞–∑–∞–¥')
        markup.add(back)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞", reply_markup=markup)
    if message.text == '–ù–∞–∑–∞–¥':
        city_flag = 0
        see_weather(message)
    if city_flag != 0 and message.text != '–ì–æ—Ä–æ–¥üåâ':
        global search_flag
        search_flag += 1
        city_flag = 0
        bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å')
        bot.send_sticker(message.chat.id, random.choice(res.STICKERS))
        driver = webdriver.Chrome(ChromeDriverManager().install())
        driver.get('https://yandex.ru/pogoda/?via=hl')
        statechecker1 = statechecker.StateChecker()
        statechecker1.state_check(f"{driver.current_url}")
        if statechecker1.state_check(f"{driver.current_url}") // 100 == 4 or statechecker1.state_check(
                f"{driver.current_url}") // 100 == 5:
            driver.close()
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
            bot.send_message(message.chat.id, "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=markup)
        search = driver.find_element_by_tag_name('input')
        search.send_keys(message.text)
        search.send_keys(Keys.ENTER)
        content = driver.page_source
        html = BS(content)
        zero_search = html.select('.content > h1')
        if len(zero_search) != 0:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
            markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
            bot.send_message(message.chat.id, zero_search[0].text, reply_markup=markup)
        if len(zero_search) == 0:
            global driverbuff
            driverbuff = []
            driverbuff = html.select('.place-list__item > .link')
            if message.text != driverbuff[0].text:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
                for el in driverbuff:
                    markup.add(types.KeyboardButton(f'{el.text}'))
                markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
                bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏", reply_markup=markup)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
                markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
                bot.send_message(message.chat.id, "–û–±—Ä–∞–±–æ—Ç–∫–∞...", reply_markup=markup)
            driver.close()
    if message.text != '–ü—Ä–æ—Å—Ç–æ –º–∏–º–æ –ø—Ä–æ—Ö–æ–¥–∏–ª' and message.text != '–•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É' and message.text != '–ì–æ—Ä–æ–¥üåâ' \
            and city_flag == 0 and message.text != '–ù–∞–∑–∞–¥' and search_flag == 0 and message.text != '–î–∞' and message.text != '–ù–µ—Ç' \
            and message.text != '–§–∞–∫—Ç –¥–Ω—è‚ÅâÔ∏è' and message.text != '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏üåè':
        bot.send_message(message.chat.id, "–ù–µ —Ç–æ—Ä–æ–ø–∏ –∫–æ–Ω–µ–π, —è —Ç–∞–∫ —Ç–µ–±—è –Ω–µ –ø–æ–π–º—É)")

    if len(driverbuff) != 0 and search_flag != 0:
        for city in driverbuff:
            if city.text == message.text:
                global mem
                mem = city
                if os.path.isfile(f"{message.text}.json"):
                    worker = jsonworker.JsonWorker()
                    data = worker.json_read(message)
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2, one_time_keyboard=True)
                    yes = types.KeyboardButton("–î–∞")
                    no = types.KeyboardButton("–ù–µ—Ç")
                    markup.add(yes, no)
                    bot.send_message(message.chat.id, f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –≤ {message.text} —É–∂–µ –±—ã–ª –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω –≤ {data['time']} —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {data['weather']} "
                                                      f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑?",reply_markup=markup)
                else:
                    bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤")
                    bot.send_sticker(message.chat.id, random.choice(res.STICKERS))
                    tmp = str(datetime.datetime.now())
                    driver = webdriver.Chrome(ChromeDriverManager().install())
                    driver.get(f"https://yandex.ru{city['href']}")
                    content = driver.page_source
                    html = BS(content)
                    buff = html.select('.fact__temp-wrap > a')
                    degree = buff[0]['aria-label']
                    bot.send_message(message.chat.id, f'{degree}')
                    worker3 = jsonworker.JsonWorker()
                    json_message = worker3.json_data_organaizer(message.text, tmp, degree)
                    worker3.json_write(json_message, message)
                    search_flag = 0

    if message.text == "–ù–µ—Ç" and search_flag != 0:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–ö–∞–∫ –ø–æ–∂–µ–ª–∞–µ—Ç–µ", reply_markup=markup)
        search_flag = 0
    if message.text == '–î–∞' and search_flag != 0:
        bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤")
        bot.send_sticker(message.chat.id, random.choice(res.STICKERS))
        tmp = str(datetime.datetime.now())
        driver = webdriver.Chrome(ChromeDriverManager().install())
        driver.get(f"https://yandex.ru{mem['href']}")
        content = driver.page_source
        html = BS(content)
        buff = html.select('.fact__temp-wrap > a')
        degree = buff[0]['aria-label']
        worker2 = jsonworker.JsonWorker()
        json_message = worker2.json_data_organaizer(mem.text, tmp, degree)
        worker2.json_clean(mem)
        worker2.json_write(json_message, mem)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–°–∞–º–∞—è —Å–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:", reply_markup=markup)
        bot.send_message(message.chat.id, f'{degree}')
        search_flag = 0
    if message.text == '–§–∞–∫—Ç –¥–Ω—è‚ÅâÔ∏è':
        r = requests.get('https://randstuff.ru/fact/fav/')
        html = BS(r.content, 'html.parser')
        fact = html.select('td')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1, one_time_keyboard=True)
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, fact[0].text, reply_markup=markup)
        bot.send_sticker(message.chat.id, random.choice(res.STICKERS4))
    if message.text == '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏üåè':
        r = requests.get('https://www.rbc.ru/')
        html = BS(r.content, 'html.parser')
        news = html.select('.main__feed > a')
        markup = types.InlineKeyboardMarkup()
        for i in range(0, 7):
            elem = types.InlineKeyboardButton(f'{news[i].text.strip()}', url=f"{news[i]['href']}")
            markup.add(elem)
        bot.send_message(message.chat.id, "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:", reply_markup=markup)


@bot.message_handler(content_types=['location'])
def location(message):
    r = requests.get(f"https://yandex.ru/pogoda/?lat={message.location.latitude}&lon={message.location.longitude}")
    html = BS(r.content, 'html.parser')
    buff = html.select('.fact__temp-wrap > a')
    degree = buff[0]['aria-label']
    bot.send_message(message.chat.id, f'{degree}')


@bot.message_handler(content_types=['audio', 'document', 'photo', 'sticker', 'video', 'video_note', 'voice', 'contact'])
def cancel(message):
    bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é")
    bot.send_sticker(message.chat.id, random.choice(res.STICKERS2))


if __name__ == "__main__":
    bot.polling(none_stop=True)
